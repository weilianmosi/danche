{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/date-picker/style\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u5355\\u8F66\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\\u5F00\\u53D1\\\\imoocmanager\\\\src\\\\components\\\\BaseForm\\\\index.js\";\nimport React from 'react';\nimport Utils from '../../utils/utils';\nconst FormItem = _Form.Item;\nconst Option = _Select.Option; // class FilterForm extends React.Component{\n//   initFormList = () => {\n//     const {getFieldDecorator} = this.props.form\n//     const formList = this.props.formList\n//     if(formList && formList.length > 0) {\n//       formList.forEach((item,i) => {\n//         let label = item.label\n//         let field = item.field\n//         let initialValue = item.initialValue || ''\n//         let placeholder = item.placeholder\n//         let width = item.width \n//         if(item.type == 'SELECT') {\n//           const SELECT = <FormItem label={label} key={field} >\n//             { \n//               getFieldDecorator([field],{\n//                 initialValue: initialValue\n//               })(\n//                   <Input type=\"text\" placeholder={placeholder} />\n//                 )\n//             }\n//           </FormItem>\n//         }\n//       })\n//     }\n//   }\n//   render() {\n//     return(\n//       <Form>\n//       </Form>\n//     )\n//   }\n// }\n\nclass FilterForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFilterSubmit = () => {\n      let fieldsValue = this.props.form.getFieldsValue();\n      this.props.filterSubmit(fieldsValue);\n    };\n\n    this.reset = () => {\n      this.props.form.resetFields();\n    };\n\n    this.initFormList = () => {\n      const getFieldDecorator = this.props.form.getFieldDecorator;\n      const formList = this.props.formList;\n      const formItemList = [];\n\n      if (formList && formList.length > 0) {\n        formList.forEach((item, i) => {\n          let label = item.label;\n          let field = item.field;\n          let initialValue = item.initialValue || '';\n          let placeholder = item.placeholder;\n          let width = item.width;\n\n          if (item.type == '时间查询') {\n            const begin_time = React.createElement(FormItem, {\n              label: \"\\u8BA2\\u5355\\u65F6\\u95F4\",\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65\n              },\n              __self: this\n            }, getFieldDecorator('begin_time')(React.createElement(_DatePicker, {\n              showTime: true,\n              placeholder: placeholder,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            })));\n            formItemList.push(begin_time);\n            const end_time = React.createElement(FormItem, {\n              label: \"~\",\n              colon: false,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }, getFieldDecorator('end_time')(React.createElement(_DatePicker, {\n              showTime: true,\n              placeholder: placeholder,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76\n              },\n              __self: this\n            })));\n            formItemList.push(end_time);\n          } else if (item.type == '城市') {\n            const City = React.createElement(FormItem, {\n              label: \"\\u57CE\\u5E02\",\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82\n              },\n              __self: this\n            }, getFieldDecorator('city', {\n              initialValue: '0'\n            })(React.createElement(_Select, {\n              style: {\n                width: 80\n              },\n              placeholder: placeholder,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 87\n              },\n              __self: this\n            }, Utils.getOptionList([{\n              id: '0',\n              name: '全部'\n            }, {\n              id: '1',\n              name: '北京'\n            }, {\n              id: '2',\n              name: '上海'\n            }, {\n              id: '3',\n              name: '天津'\n            }, {\n              id: '4',\n              name: '杭州'\n            }]))));\n            formItemList.push(City);\n          } else if (item.type == 'INPUT') {\n            const INPUT = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initialValue\n            })(React.createElement(_Input, {\n              type: \"text\",\n              style: {\n                width: width\n              },\n              placeholder: placeholder,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            })));\n            formItemList.push(INPUT);\n          } else if (item.type == 'SELECT') {\n            const SELECT = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              initialValue: initialValue\n            })(React.createElement(_Select, {\n              style: {\n                width: width\n              },\n              placeholder: placeholder,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 114\n              },\n              __self: this\n            }, Utils.getOptionList(item.list))));\n            formItemList.push(SELECT);\n          } else if (item.type == 'CHECKBOX') {\n            const CHECKBOX = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125\n              },\n              __self: this\n            }, getFieldDecorator([field], {\n              valuePropName: 'checked',\n              initialValue: initialValue //true | false\n\n            })(React.createElement(_Checkbox, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131\n              },\n              __self: this\n            }, label)));\n            formItemList.push(CHECKBOX);\n          } else if (item.type == 'DATE') {\n            const Date = React.createElement(FormItem, {\n              label: label,\n              key: field,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 139\n              },\n              __self: this\n            }, getFieldDecorator([field])(React.createElement(_DatePicker, {\n              showTime: true,\n              placeholder: placeholder,\n              format: \"YYYY-MM-DD HH:mm:ss\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142\n              },\n              __self: this\n            })));\n            formItemList.push(Date);\n          }\n        });\n      }\n\n      return formItemList;\n    };\n  }\n\n  render() {\n    return React.createElement(_Form, {\n      layout: \"inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, this.initFormList(), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      style: {\n        margin: '0 20px'\n      },\n      onClick: this.handleFilterSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"\\u67E5\\u8BE2\"), React.createElement(_Button, {\n      onClick: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"\\u91CD\\u7F6E\")));\n  }\n\n}\n\nexport default _Form.create({})(FilterForm);","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\单车后台管理系统开发\\imoocmanager\\src\\components\\BaseForm\\index.js"],"names":["React","Utils","FormItem","Item","Option","FilterForm","Component","handleFilterSubmit","fieldsValue","props","form","getFieldsValue","filterSubmit","reset","resetFields","initFormList","getFieldDecorator","formList","formItemList","length","forEach","item","i","label","field","initialValue","placeholder","width","type","begin_time","push","end_time","City","getOptionList","id","name","INPUT","SELECT","list","CHECKBOX","valuePropName","Date","render","margin","create"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Input, Select, Form, Button, Checkbox, Radio, DatePicker} from 'antd'\nimport Utils from '../../utils/utils';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n// class FilterForm extends React.Component{\n\n//   initFormList = () => {\n//     const {getFieldDecorator} = this.props.form\n//     const formList = this.props.formList\n//     if(formList && formList.length > 0) {\n//       formList.forEach((item,i) => {\n//         let label = item.label\n//         let field = item.field\n//         let initialValue = item.initialValue || ''\n//         let placeholder = item.placeholder\n//         let width = item.width \n//         if(item.type == 'SELECT') {\n//           const SELECT = <FormItem label={label} key={field} >\n//             { \n//               getFieldDecorator([field],{\n//                 initialValue: initialValue\n//               })(\n//                   <Input type=\"text\" placeholder={placeholder} />\n//                 )\n//             }\n//           </FormItem>\n//         }\n//       })\n//     }\n//   }\n//   render() {\n//     return(\n//       <Form>\n        \n//       </Form>\n//     )\n//   }\n// }\n\nclass FilterForm extends React.Component{\n\n    handleFilterSubmit = ()=>{\n        let fieldsValue = this.props.form.getFieldsValue();\n        this.props.filterSubmit(fieldsValue);\n    }\n\n    reset = ()=>{\n        this.props.form.resetFields();\n    }\n\n    initFormList = ()=>{\n        const { getFieldDecorator } = this.props.form;\n        const formList = this.props.formList;\n        const formItemList = [];\n        if (formList && formList.length>0){\n            formList.forEach((item,i)=>{\n                let label = item.label;\n                let field = item.field;\n                let initialValue = item.initialValue || '';\n                let placeholder = item.placeholder;\n                let width = item.width;\n                if (item.type == '时间查询'){\n                    const begin_time = <FormItem label=\"订单时间\" key={field}>\n                        {\n                            getFieldDecorator('begin_time')(\n                                <DatePicker showTime={true} placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\"/>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(begin_time)\n                    const end_time = <FormItem label=\"~\" colon={false} key={field}>\n                        {\n                            getFieldDecorator('end_time')(\n                                <DatePicker showTime={true} placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\" />\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(end_time)\n                } else if(item.type == '城市'){\n                    const City = <FormItem label='城市' key={field}>\n                        {\n                            getFieldDecorator('city',{\n                                initialValue:'0'\n                            })(\n                                <Select\n                                    style={{ width: 80 }}\n                                    placeholder={placeholder}\n                                >\n                                    {Utils.getOptionList([{id:'0',name:'全部'},{id:'1',name:'北京'},{id:'2',name:'上海'},{id:'3',name:'天津'},{id:'4',name:'杭州'}])}\n                                </Select>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(City)\n                } else if(item.type == 'INPUT'){\n                    const INPUT = <FormItem label={label} key={field}>\n                        {\n                            getFieldDecorator([field],{\n                                initialValue: initialValue\n                            })(\n                                <Input type=\"text\" style={{ width: width }} placeholder={placeholder} />\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(INPUT)\n                } else if (item.type == 'SELECT') {\n                    const SELECT = <FormItem label={label} key={field}>\n                        {\n                            getFieldDecorator([field], {\n                                initialValue: initialValue\n                            })(\n                                <Select\n                                    style={{ width: width }}\n                                    placeholder={placeholder}\n                                >\n                                    {Utils.getOptionList(item.list)}\n                                </Select>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(SELECT)\n                } else if (item.type == 'CHECKBOX') {\n                    const CHECKBOX = <FormItem label={label} key={field}>\n                        {\n                            getFieldDecorator([field], {\n                                valuePropName: 'checked',\n                                initialValue: initialValue //true | false\n                            })(\n                                <Checkbox>\n                                    {label}\n                                </Checkbox>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(CHECKBOX)\n                } else if (item.type == 'DATE') {\n                    const Date = <FormItem label={label} key={field}>\n                        {\n                            getFieldDecorator([field])(\n                                <DatePicker showTime={true} placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\"/>\n                            )\n                        }\n                    </FormItem>;\n                    formItemList.push(Date)\n                }\n            })\n        }\n        return formItemList;\n    }\n    render(){\n        return (\n            <Form layout=\"inline\">\n                { this.initFormList() }\n                <FormItem>\n                    <Button type=\"primary\" style={{ margin: '0 20px' }} onClick={this.handleFilterSubmit}>查询</Button>\n                    <Button onClick={this.reset}>重置</Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\nexport default Form.create({})(FilterForm);"]},"metadata":{},"sourceType":"module"}