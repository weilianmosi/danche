{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u5355\\u8F66\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\\u5F00\\u53D1\\\\imoocmanager\\\\src\\\\components\\\\ETable\\\\index.js\";\nimport React from 'react';\nimport Utils from '../../utils/utils';\nimport \"./index.less\";\nexport default class ETable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.onRowClick = (record, index) => {\n      let rowSelection = this.props.rowSelection;\n\n      if (rowSelection == 'checkbox') {\n        let selectedRowKeys = this.props.selectedRowKeys;\n        let selectedIds = this.props.selectedIds;\n        let selectedItem = this.props.selectedItem || [];\n\n        if (selectedIds) {\n          const i = selectedIds.indexOf(record.id);\n\n          if (i == -1) {\n            //避免重复添加\n            selectedIds.push(record.id);\n            selectedRowKeys.push(index);\n            selectedItem.push(record);\n          } else {\n            selectedIds.splice(i, 1);\n            selectedRowKeys.splice(i, 1);\n            selectedItem.splice(i, 1);\n          }\n        } else {\n          selectedIds = [record.id];\n          selectedRowKeys = [index];\n          selectedItem = [record];\n        }\n\n        this.props.updateSelectedItem(selectedRowKeys, selectedItem || {}, selectedIds);\n      } else {\n        let selectKey = [index];\n        const selectedRowKeys = this.props.selectedRowKeys;\n\n        if (selectedRowKeys && selectedRowKeys[0] == index) {\n          return;\n        }\n\n        this.props.updateSelectedItem(selectKey, record || {});\n      }\n    };\n\n    this.onSelectChange = (selectedRowKeys, selectedRows) => {\n      let rowSelection = this.props.rowSelection;\n      const selectedIds = [];\n\n      if (rowSelection == 'checkbox') {\n        selectedRows.map(item => {\n          selectedIds.push(item.id);\n        });\n        this.setState({\n          selectedRowKeys,\n          selectedIds: selectedIds,\n          selectedItem: selectedRows[0]\n        });\n      }\n\n      this.props.updateSelectedItem(selectedRowKeys, selectedRows[0], selectedIds);\n    };\n\n    this.onSelectAll = (selected, selectedRows, changeRows) => {\n      let selectedIds = [];\n      let selectKey = [];\n      selectedRows.forEach((item, i) => {\n        selectedIds.push(item.id);\n        selectKey.push(i);\n      });\n      this.props.updateSelectedItem(selectKey, selectedRows[0] || {}, selectedIds);\n    };\n\n    this.getOptions = () => {\n      let p = this.props;\n      const name_list = {\n        \"订单编号\": 170,\n        \"车辆编号\": 80,\n        \"手机号码\": 96,\n        \"用户姓名\": 70,\n        \"密码\": 70,\n        \"运维区域\": 300,\n        \"车型\": 42,\n        \"故障编号\": 76,\n        \"代理商编码\": 97,\n        \"角色ID\": 64\n      };\n\n      if (p.columns && p.columns.length > 0) {\n        p.columns.forEach(item => {\n          //开始/结束 时间\n          if (!item.title) {\n            return;\n          }\n\n          if (!item.width) {\n            if (item.title.indexOf(\"时间\") > -1 && item.title.indexOf(\"持续时间\") < 0) {\n              item.width = 132;\n            } else if (item.title.indexOf(\"图片\") > -1) {\n              item.width = 86;\n            } else if (item.title.indexOf(\"权限\") > -1 || item.title.indexOf(\"负责城市\") > -1) {\n              item.width = '40%';\n              item.className = \"text-left\";\n            } else {\n              if (name_list[item.title]) {\n                item.width = name_list[item.title];\n              }\n            }\n          }\n\n          item.bordered = true;\n        });\n      }\n\n      const selectedRowKeys = this.props.selectedRowKeys;\n      const rowSelection = {\n        type: 'radio',\n        selectedRowKeys,\n        onChange: this.onSelectChange,\n        onSelect: (record, selected, selectedRows) => {\n          console.log('...');\n        },\n        onSelectAll: this.onSelectAll\n      };\n      let row_selection = this.props.rowSelection; // 当属性未false或者null时，说明没有单选或者复选列\n\n      if (row_selection === false || row_selection === null) {\n        row_selection = false;\n      } else if (row_selection == 'checkbox') {\n        //设置类型未复选框\n        rowSelection.type = 'checkbox';\n      } else {\n        //默认未单选\n        row_selection = 'radio';\n      }\n\n      return React.createElement(_Table, Object.assign({\n        className: \"card-wrap page-table\",\n        bordered: true\n      }, this.props, {\n        rowSelection: row_selection ? rowSelection : null,\n        onRow: (record, index) => ({\n          onClick: () => {\n            if (!row_selection) {\n              return;\n            }\n\n            this.onRowClick(record, index);\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }));\n    };\n\n    this.render = () => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, this.getOptions());\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\单车后台管理系统开发\\imoocmanager\\src\\components\\ETable\\index.js"],"names":["React","Utils","ETable","Component","state","onRowClick","record","index","rowSelection","props","selectedRowKeys","selectedIds","selectedItem","i","indexOf","id","push","splice","updateSelectedItem","selectKey","onSelectChange","selectedRows","map","item","setState","onSelectAll","selected","changeRows","forEach","getOptions","p","name_list","columns","length","title","width","className","bordered","type","onChange","onSelect","console","log","row_selection","onClick","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Utils from '../../utils/utils'\nimport {Table} from 'antd'\nimport  \"./index.less\"\nexport default class ETable extends React.Component {\n\n    state = {}\n    //处理行点击事件\n    onRowClick = (record, index) => {\n        let rowSelection = this.props.rowSelection;\n        if(rowSelection == 'checkbox'){\n            let selectedRowKeys = this.props.selectedRowKeys;\n            let selectedIds = this.props.selectedIds;\n            let selectedItem = this.props.selectedItem || [];\n            if (selectedIds) {\n                const i = selectedIds.indexOf(record.id);\n                if (i == -1) {//避免重复添加\n                    selectedIds.push(record.id)\n                    selectedRowKeys.push(index);\n                    selectedItem.push(record);\n                }else{\n                    selectedIds.splice(i,1);\n                    selectedRowKeys.splice(i,1);\n                    selectedItem.splice(i,1);\n                }\n            } else {\n                selectedIds = [record.id];\n                selectedRowKeys = [index]\n                selectedItem = [record];\n            }\n            this.props.updateSelectedItem(selectedRowKeys,selectedItem || {},selectedIds);\n        }else{\n            let selectKey = [index];\n            const selectedRowKeys = this.props.selectedRowKeys;\n            if (selectedRowKeys && selectedRowKeys[0] == index){\n                return;\n            }\n            this.props.updateSelectedItem(selectKey,record || {});\n        }\n    };\n\n    // 选择框变更\n    onSelectChange = (selectedRowKeys, selectedRows) => {\n        let rowSelection = this.props.rowSelection;\n        const selectedIds = [];\n        if(rowSelection == 'checkbox'){\n            selectedRows.map((item)=>{\n                selectedIds.push(item.id);\n            });\n            this.setState({\n                selectedRowKeys,\n                selectedIds:selectedIds,\n                selectedItem: selectedRows[0]\n            });\n        }\n        this.props.updateSelectedItem(selectedRowKeys,selectedRows[0],selectedIds);\n    };\n\n    onSelectAll = (selected, selectedRows, changeRows) => {\n        let selectedIds = [];\n        let selectKey = [];\n        selectedRows.forEach((item,i)=> {\n            selectedIds.push(item.id);\n            selectKey.push(i);\n        });\n        this.props.updateSelectedItem(selectKey,selectedRows[0] || {},selectedIds);\n    }\n\n    getOptions = () => {\n        let p = this.props;\n        const name_list = {\n            \"订单编号\":170,\n            \"车辆编号\":80,\n            \"手机号码\":96,\n            \"用户姓名\":70,\n            \"密码\":70,\n            \"运维区域\":300,\n            \"车型\":42,\n            \"故障编号\":76,\n            \"代理商编码\":97,\n            \"角色ID\":64\n        };\n        if (p.columns && p.columns.length > 0) {\n            p.columns.forEach((item)=> {\n                //开始/结束 时间\n                if(!item.title){\n                    return\n                }\n                if(!item.width){\n                    if(item.title.indexOf(\"时间\") > -1 && item.title.indexOf(\"持续时间\") < 0){\n                        item.width = 132\n                    }else if(item.title.indexOf(\"图片\") > -1){\n                        item.width = 86\n                    }else if(item.title.indexOf(\"权限\") > -1 || item.title.indexOf(\"负责城市\") > -1){\n                        item.width = '40%';\n                        item.className = \"text-left\";\n                    }else{\n                        if(name_list[item.title]){\n                            item.width = name_list[item.title];\n                        }\n                    }\n                }\n                item.bordered = true;\n            });\n        }\n        const { selectedRowKeys } = this.props;\n        const rowSelection = {\n            type: 'radio',\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n            onSelect:(record, selected, selectedRows)=>{\n                console.log('...')\n            },\n            onSelectAll:this.onSelectAll\n        };\n        let row_selection = this.props.rowSelection;\n        // 当属性未false或者null时，说明没有单选或者复选列\n        if(row_selection===false || row_selection === null){\n            row_selection = false;\n        }else if(row_selection == 'checkbox'){\n            //设置类型未复选框\n            rowSelection.type = 'checkbox';\n        }else{\n            //默认未单选\n            row_selection = 'radio';\n        }\n        return <Table \n                className=\"card-wrap page-table\"\n                bordered \n                {...this.props}\n                rowSelection={row_selection?rowSelection:null}\n                onRow={(record,index) => ({\n                    onClick: ()=>{\n                        if(!row_selection){\n                            return;\n                        }\n                        this.onRowClick(record,index)\n                    }\n                  })}\n            />\n    };\n    render = () => {\n        return (\n            <div>\n                {this.getOptions()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}